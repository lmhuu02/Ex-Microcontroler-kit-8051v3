C51 COMPILER V9.52.0.0   LCD                                                               02/24/2023 14:25:05 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN lcd.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include<reg51.h>
   2          #include<intrins.h>
   3          #include "lcd.h"
   4          #define lcd P0
   5          
   6          sbit rs=P2^2;
   7          sbit rw=P2^3;
   8          sbit en=P2^4;
   9          
  10          void delay_ms(unsigned int n)
  11          {
  12   1      unsigned int m;
  13   1      for(n;n>0;n--)
  14   1      {
  15   2      for(m=121;m>0;m--);
  16   2          _nop_();
  17   2        _nop_();
  18   2        _nop_();
  19   2        _nop_();
  20   2        _nop_();
  21   2        _nop_();
  22   2      }
  23   1      }
  24          void lcd_init(void)
  25          {
  26   1      lcd_cmd(0x02);
  27   1      lcd_cmd(0x28);  //38 for 8 bit mode .... 28 for 4 bit mode
  28   1      lcd_cmd(0x01);
  29   1      lcd_cmd(0x06);
  30   1      lcd_cmd(0x0c);
  31   1      }
  32          
  33          void lcd_cmd(unsigned char cmd)
  34          {                  //             LCD_PORT         CMD                value
  35   1      lcd =(lcd & 0x0F) | (cmd & 0xF0); // send upper nibble lcd_port = 1111 1111      cmd  = 1010 1100     lcd_
             -data  0000 1111
  36   1      rs=0;                //                    & 0X0F = 0000 1111    & 0XF0 = 1111 0000   cmd_data  1010 0000
  37   1      rw=0;                //         -------------------     -------------------   ---------------------
  38   1      en=1;                //            lcd_dada = 0000 1111  cmd_data = 1010 0000         1010 1111
  39   1      delay_ms(2);
  40   1      en=0;
  41   1                         //             PORT         CMD                value
  42   1      lcd =(lcd & 0x0F) | (cmd << 4);   // send lower nibble   port_lcd = 1111 1111    cmd  = 1010 1100    port_d
             -ata 0000 1111
  43   1      en=1;                //                      & 0X0F = 0000 1111      << 4               cmd_data 1100 0000
  44   1      delay_ms(2);             //            ------------------  -------------------   --------------------
  45   1      en=0;                //             port_dada = 0000 1111   cmd_data = 1100 0000       1100 1111
  46   1      }
  47          
  48          void lcd_data(unsigned char ch)
  49          {
  50   1      lcd =(lcd & 0x0F) | (ch & 0xF0);  // send upper nibble lcd_port = 1111 1111      cmd  = 1010 1100     lcd_
             -data  0000 1111
  51   1      rs=1;                //                    & 0X0F = 0000 1111    & 0XF0 = 1111 0000   cmd_data  1010 0000
  52   1      rw=0;                //         -------------------     -------------------   ---------------------
C51 COMPILER V9.52.0.0   LCD                                                               02/24/2023 14:25:05 PAGE 2   

  53   1      en=1;                //            lcd_dada = 0000 1111  cmd_data = 1010 0000         1010 1111
  54   1      delay_ms(2);
  55   1      en=0;
  56   1                         //             PORT         CMD                value
  57   1      lcd =(lcd & 0x0F) | (ch << 4);   // send lower nibble  port_lcd = 1111 1111    cmd  = 1010 1100    port_da
             -ta 0000 1111
  58   1      en=1;                //                      & 0X0F = 0000 1111      << 4               cmd_data 1100 0000
  59   1      delay_ms(2);             //            ------------------  -------------------   --------------------
  60   1      en=0;                //             port_dada = 0000 1111   cmd_data = 1100 0000       1100 1111
  61   1      }
  62          
  63          void lcd_str(unsigned char *v)
  64          {
  65   1      unsigned char i=0;
  66   1      while(v[i]!='\0')
  67   1      {
  68   2        lcd_data(v[i]);
  69   2        i++;
  70   2        delay_ms(10);
  71   2      }
  72   1      }
  73          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    176    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
